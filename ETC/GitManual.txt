# <필수입력> [옵션] <-- 괄호 확인

< 규칙 >
0. 항상 자신 브랜치인지 확인 후 작업 !

1. [main] 브랜치에는 직접 커밋을 올리지 않기

2. 새로운 기능 구현 하기 전에 항상 [main] 기준으로 새로운 브랜치 만든 후 작업

3. 한 브랜치 이름은 [기능이름] 형식으로 하고 한 명만 커밋 올리기
(두 명이상이 한 브랜치에서 작업 중 일 때는 서로 사전 동의 구하고 커밋 올리기)

4. 최대한 커밋 시 커밋 메세지 적기(커밋 설명)

5. 기능 브랜치에서 기능 개발이 끝난 후(에러없는) [main]에 병합하기

6. 모든 명령어 실행 후 bash창 메세지 잘 확인하기(에러없이 수행됐는지)


######### 셋팅 #########

- GitHub 말고 Git 다운로드
- 원하는 에디터 다운로드(검색하면 나와여 참고로 editplus 지원안됨)
(설치 시 기본 에디터 설정 빼고는 다 디폴트값으로 선택)

## 이건 처음 한번만 하면 됨
- GitHub에서 사용하는 이메일이랑 계정이름으로 !!

-버전관리 전 email, name 등록(변경 시에도 똑같이 하면 됨)
	$ git config --global user.email "youremail@email.com"
	$ git config --global user.name "youremail@email.com"
	ㄴ 확인 시
		$ git config --global user.email
		$ git config --global user.name
##

-git 초기화 과정
	$ git init
	: 'initialized empty git repository in ~' 나오면 성공, 
	이때부터 버전관리 가능

- 로컬저장소에 원격 저장소 알리기
	1. GitHub에서 원격저장소 만든 후 원격저장소의 주소 복사(자기 git주소X)
	2. [로컬저장소] 폴더의 git bash로 들어온 후
	3. $ git remote add <원격 저장소 이름> <원격저장소 주소>

- 원격저장소에 커밋들 올리기
	$ git push <원격저장소이름> <브랜치이름>
	: 엔터 치면 깃 허브 로그인창이 뜨는데 로그인 후,
	 bash창에 100%완료 텍스트 뜨면 성공

- 원격저장소의 커밋을 로컬 저장소에 내려받기
	1. 먼저 원하는 경로에 원격저장소의 커밋을 내려받을 폴더 생성 후 해당 폴더에서 bash 창 열기
	2. $ git clone 원격저장소주소 .
	[꼭 저장소주소 뒤에 한 칸 띄우고 마침표(.) 찍기 !]

- 원격저장소의 내용 로컬에 갱신하기
	$ git pull origin master
	: '(변경될파일 갯수) file changed' 나오면 성공

######### 커밋 #########

- 커밋 하기 전 
	$ git status
	: 워킹트리 상태 보는거, 커밋 전 상태 보고 add 안된 파일이나 변경사항 있는 파일 커밋
	$ git status -s
	: 상태 요약해서 보여주는 거, 변경된 파일 많을 때   
-커밋에 추가(스테이징)
	$ git add 추가할파일명(확장자포함)

- 커밋 만들기
	$ git commit -m "커밋에 대한 설명"
	: '1file changed, 1insertion(+)'나오면 성공
	$ git commit -a 
	: add 명령 생략하고 바로 커밋(untracked 파일은 커밋 안됨)

- 다른 커밋으로 이동 시
	1. $ git log
	2. 로그 확인 후 원하는 커밋 아이디 앞 7자리(전체도 ok) 복사(ctrl+ins)
	3. $ git checkout 커밋아이디
	: 'HEAD is now at 커밋아이디' 보이면 성공

- 제일 최신 커밋으로 이동 시
 	$ git checkout -


######### 브랜치 #########

- 브랜치 생성 (항상 최신 [main]기준으로 브랜치 생성, 예외적일 때 제외)
	$ git branch <브랜치이름>
	: bash창에 switch어쩌구 나오면 성공
	$ git checkout <브랜치이름>
	: 꼭 bash 창에 브랜치이름 바꼈는지([main]브랜치가 아닌지) 확인 후 작업


#########기본 명령어 #########

$ pwd : 현재 폴더 위치
$ cd : 홈 폴더로 이동
$ cd <폴더이름> : 해당 디렉토리로 이동
$ cd ../ :  상위 폴더로 이동
$ cd <파일명.확장자> <복사본명.확장자> : 파일 복사
$ mkdir <새폴더이름> : 새폴더 맹들기
$ echo "입력할문자"  : 문자 출력
$ git status : git 워킹트리 상태를 보는 명령어,
워킹트리가 아닌 곳에서 실행하면 오류 발생
$ git status -s : 요약해서 보여줌

#########기본 git 명령어 #########

HEAD
: 현재 작업 중인 브랜치

$ git add 파일1 파일 2 파일3 ...

$ git commit -m "커밋 설명"

$ git commit -a 
: add 명령 생략하고 바로 커밋

$ git push [-u] [원격저장소이름] [브랜치 이름]
: 한번 등록하면 git push만 입력해도 됨

$ git pull
: 원격저장소 변경사항을 가져와서 로컬저장소에 병합(fetch + merge)

$ git fetch [원격저장소이름] [브랜치이름]
: 원격저장소와 로컬저장소 동기화(옵션 생략하면 모든 브랜치 가져옴)

$ git merge 브랜치이름
: 브랜치끼리 병합 시

$ git remote add <원격저장소이름> <원격저장소주소>

$ git branch
:로컬 저장소 브랜치 목록 볼 때

$ git branch -r[v]
:원격 저장소 브랜치 목록 볼 때, [v] 추가하면 커밋 요약도 볼 수 있음

$ git branch [-f] <브랜치이름> [커밋체크섬]
: 새로운 브랜치 생성. 커밋 체크섬 지정 안하면 HEAD기준으로 브랜치 생성

$ git checkout <브랜치이름>
: 해당 브랜치로 체크아웃

$ git merge <대상 브랜치>
: 현재 브랜치와 대상 브랜치 병합(병합 커밋 생김)

$ git branch -d <브랜치 이름>
: 브랜치 삭제 (HEAD브랜치나 병합되지 않은 브랜치는 삭제 불가)

$ git branch -D <브랜치 이름>
: 강제 브랜치 삭제 -d로 삭제 안될 시 (사용 조심)

$ git reset --hard <이동할 커밋체크섬>
: 현재 브랜치를 지정한 커밋으로 옮기고, 작업 내용도 같이 변경

######### 옵션 설정 명령어 (우선순위 : 지역>전역>시스템) #########

$ git config --global/local/system <옵션명> 
: 지정한 곳 옵션의 내용 확인
$ git config --global/local/system <옵션명> <새로운 값> 
: 옵션 값을 새로 설정
$ git config --global/local/system --unset <옵션명> 
: 지정한 옵션 삭제
$ git config --list 
: 모든 옵션 확인